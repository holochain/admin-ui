{"version":3,"file":"create-component.js","sources":["src/create-component.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport * as ReactModule from 'react';\n\nconst reservedReactProperties = new Set([\n  'children',\n  'localName',\n  'ref',\n  'style',\n  'className',\n]);\n\nconst listenedEvents: WeakMap<\n  Element,\n  Map<string, EventListenerObject>\n> = new WeakMap();\n\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (\n  node: Element,\n  event: string,\n  listener: (event?: Event) => void\n) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, (events = new Map()));\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, (handler = {handleEvent: listener}));\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = <E extends Element, T>(\n  node: E,\n  name: string,\n  value: unknown,\n  old: unknown,\n  events?: StringValued<T>\n) => {\n  const event = events?.[name as keyof T];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value as (e?: Event) => void);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name as keyof E] = value as E[keyof E];\n  }\n};\n\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref: React.Ref<unknown>, value: Element | null) => {\n  if (typeof ref === 'function') {\n    (ref as (e: Element | null) => void)(value);\n  } else {\n    (ref as {current: Element | null}).current = value;\n  }\n};\n\ntype Events<S> = {\n  [P in keyof S]?: (e: Event) => unknown;\n};\n\ntype StringValued<T> = {\n  [P in keyof T]: string;\n};\n\ntype Constructor<T> = {new (): T};\n\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = <I extends HTMLElement, E>(\n  React: typeof ReactModule,\n  tagName: string,\n  elementClass: Constructor<I>,\n  events?: StringValued<E>,\n  displayName?: string\n) => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n\n  // Props the user is allowed to use, includes standard attributes, children,\n  // ref, as well as special event and element properties.\n  // TODO: we might need to omit more properties from HTMLElement than just\n  // 'children', but 'children' is special to JSX, so we must at least do that.\n  type UserProps = React.PropsWithChildren<\n    React.PropsWithRef<\n      Partial<Omit<I, 'children'>> &\n        Events<E> &\n        React.HTMLAttributes<HTMLElement>\n    >\n  >;\n\n  // Props used by this component wrapper. This is the UserProps and the\n  // special `__forwardedRef` property. Note, this ref is special because\n  // it's both needed in this component to get access to the rendered element\n  // and must fulfill any ref passed by the user.\n  type ComponentProps = UserProps & {\n    __forwardedRef?: React.Ref<unknown>;\n  };\n\n  // Set of properties/events which should be specially handled by the wrapper\n  // and not handled directly by React.\n  const elementClassProps = new Set(Object.keys(events ?? {}));\n  for (const p in elementClass.prototype) {\n    if (!(p in HTMLElement.prototype)) {\n      if (reservedReactProperties.has(p)) {\n        // Note, this effectively warns only for `ref` since the other\n        // reserved props are on HTMLElement.prototype. To address this\n        // would require crawling down the prototype, which doesn't feel worth\n        // it since implementing these properties on an element is extremely\n        // rare.\n        console.warn(\n          `${tagName} contains property ${p} which is a React ` +\n            `reserved property. It will be used by React and not set on ` +\n            `the element.`\n        );\n      } else {\n        elementClassProps.add(p);\n      }\n    }\n  }\n\n  class ReactComponent extends Component<ComponentProps> {\n    private _element: I | null = null;\n    private _elementProps!: {[index: string]: unknown};\n    private _userRef?: React.Ref<unknown>;\n    private _ref?: React.RefCallback<I>;\n\n    static displayName = displayName ?? elementClass.name;\n\n    private _updateElement(oldProps?: ComponentProps) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(\n          this._element,\n          prop,\n          this.props[prop as keyof ComponentProps],\n          oldProps ? oldProps[prop as keyof ComponentProps] : undefined,\n          events\n        );\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    override componentDidMount() {\n      this._updateElement();\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    override componentDidUpdate(old: ComponentProps) {\n      this._updateElement(old);\n    }\n\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    override render() {\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = this.props.__forwardedRef as React.Ref<unknown>;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = (value: I | null) => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props: any = {ref: this._ref};\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (elementClassProps.has(k)) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement(tagName, props);\n    }\n  }\n\n  const ForwardedComponent = React.forwardRef(\n    (props?: UserProps, ref?: React.Ref<unknown>) =>\n      createElement(\n        ReactComponent,\n        {...props, __forwardedRef: ref} as ComponentProps,\n        props?.children\n      )\n  );\n\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n\n  return ForwardedComponent;\n};\n"],"names":["reservedReactProperties","Set","listenedEvents","WeakMap","setProperty","node","name","value","old","events","event","undefined","listener","get","set","Map","handler","handleEvent","addEventListener","delete","removeEventListener","addOrUpdateEventListener","createComponent","React","tagName","elementClass","displayName","Component","createElement","elementClassProps","Object","keys","p","prototype","HTMLElement","has","console","warn","add","ReactComponent","constructor","this","_updateElement","oldProps","_element","prop","_elementProps","props","componentDidMount","componentDidUpdate","render","userRef","__forwardedRef","_ref","_userRef","ref","current","setRef","k","v","entries","ForwardedComponent","forwardRef","children"],"mappings":";;;;;AAQA,MAAMA,EAA0B,IAAIC,IAAI,CACtC,WACA,YACA,MACA,QACA,cAGIC,EAGF,IAAIC,QAsCFC,EAAc,CAClBC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAQD,MAAAA,SAAAA,EAASH,QACTK,IAAVD,EAEEH,IAAUC,GAxCe,EAC/BH,EACAK,EACAE,KAEA,IAAIH,EAASP,EAAeW,IAAIR,QACjBM,IAAXF,GACFP,EAAeY,IAAIT,EAAOI,EAAS,IAAIM,KAEzC,IAAIC,EAAUP,EAAOI,IAAIH,QACRC,IAAbC,OAEcD,IAAZK,GACFP,EAAOK,IAAIJ,EAAQM,EAAU,CAACC,YAAaL,IAC3CP,EAAKa,iBAAiBR,EAAOM,IAG7BA,EAAQC,YAAcL,OAGHD,IAAZK,IACTP,EAAOU,OAAOT,GACdL,EAAKe,oBAAoBV,EAAOM,KAmB9BK,CAAyBhB,EAAMK,EAAOH,GAIxCF,EAAKC,GAAmBC,GA6Cfe,EAAkB,CAC7BC,EACAC,EACAC,EACAhB,EACAiB,KAEA,MAAMC,EAAYJ,EAAMI,UAClBC,EAAgBL,EAAMK,cAwBtBC,EAAoB,IAAI5B,IAAI6B,OAAOC,KAAKtB,MAAAA,EAAAA,EAAU,KACxD,IAAK,MAAMuB,KAAKP,EAAaQ,UACrBD,KAAKE,YAAYD,YACjBjC,EAAwBmC,IAAIH,GAM9BI,QAAQC,KACN,GAAGb,uBAA6BQ,8FAKlCH,EAAkBS,IAAIN,IAK5B,MAAMO,UAAuBZ,EAA7Ba,kCACUC,OAAqB,KAOrBC,EAAeC,GACrB,GAAsB,OAAlBF,KAAKG,EAIT,IAAK,MAAMC,KAAQJ,KAAKK,EACtB1C,EACEqC,KAAKG,EACLC,EACAJ,KAAKM,MAAMF,GACXF,EAAWA,EAASE,QAAgClC,EACpDF,GAYGuC,oBACPP,KAAKC,IAOEO,mBAAmBzC,GAC1BiC,KAAKC,EAAelC,GAWb0C,SAIP,MAAMC,EAAUV,KAAKM,MAAMK,OACTzC,IAAd8B,KAAKY,GAAsBZ,KAAKa,IAAaH,IAC/CV,KAAKY,EAAQ9C,IACW,OAAlBkC,KAAKG,IACPH,KAAKG,EAAWrC,GAEF,OAAZ4C,GAxJC,EAACI,EAAyBhD,KACpB,mBAARgD,EACRA,EAAoChD,GAEpCgD,EAAkCC,QAAUjD,GAqJrCkD,CAAON,EAAS5C,GAElBkC,KAAKa,EAAWH,IAOpB,MAAMJ,EAAa,CAACQ,IAAKd,KAAKY,GAG9BZ,KAAKK,EAAgB,GACrB,IAAK,MAAOY,EAAGC,KAAM7B,OAAO8B,QAAQnB,KAAKM,OACnClB,EAAkBM,IAAIuB,GACxBjB,KAAKK,EAAcY,GAAKC,EAIxBZ,EAAY,cAANW,EAAoB,QAAUA,GAAKC,EAG7C,OAAO/B,EAAcJ,EAASuB,IA9EzBR,cAAcb,MAAAA,EAAAA,EAAeD,EAAanB,KAkFnD,MAAMuD,EAAqBtC,EAAMuC,YAC/B,CAACf,EAAmBQ,IAClB3B,EACEW,EACA,IAAIQ,EAAOK,EAAgBG,GAC3BR,MAAAA,SAAAA,EAAOgB,YAOb,OAFAF,EAAmBnC,YAAca,EAAeb,YAEzCmC"}