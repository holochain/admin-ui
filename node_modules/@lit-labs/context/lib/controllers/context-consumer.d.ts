/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { Context, ContextType } from "../create-context.js";
import { ReactiveController, ReactiveElement } from "lit";
/**
 * ContextConsumer is a ReactiveController which binds a custom-element's
 * lifecycle to the Context API. When an element is connected to the DOM it
 * will emit the context-request event, invoking the callback set on the
 * controller when the context request is satisfied. It will also call
 * the dispose method provided by the Context API when the element is
 * disconnected.
 */
export declare class ContextConsumer<Ctx, HostElement extends ReactiveElement> implements ReactiveController {
    protected host: HostElement;
    private context;
    private callback;
    private multiple;
    private provided;
    private captured;
    constructor(host: HostElement, context: Context<Ctx>, callback: (value: ContextType<Context<Ctx>>, dispose?: () => void) => void, multiple?: boolean);
    private dispose?;
    hostConnected(): void;
    hostUpdate(): void;
    tryToConnect(): void;
    hostDisconnected(): void;
}
//# sourceMappingURL=context-consumer.d.ts.map