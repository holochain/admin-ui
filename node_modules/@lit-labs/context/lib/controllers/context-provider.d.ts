/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { ContextEvent } from '../context-event.js';
import { Context, ContextType } from '../create-context.js';
import { ContextContainer } from './context-container.js';
import { ReactiveController, ReactiveElement } from 'lit';
/**
 * A ReactiveController which can add context provider behavior to a
 * custom-element.
 *
 * This controller simply listens to the `context-request` event when
 * the host is connected to the DOM and registers the received callbacks
 * against its observable Context implementation.
 */
export declare class ContextProvider<T extends Context<unknown>> extends ContextContainer<ContextType<T>> implements ReactiveController {
    protected host: ReactiveElement;
    private context;
    constructor(host: ReactiveElement, context: T, initialValue?: ContextType<T>);
    onContextRequest: (ev: ContextEvent<Context<unknown>>) => void;
    hostConnected(): void;
    hostDisconnected(): void;
}
//# sourceMappingURL=context-provider.d.ts.map