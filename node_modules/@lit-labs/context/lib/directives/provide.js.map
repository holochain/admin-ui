{"version":3,"file":"provide.js","sources":["../../src/lib/directives/provide.ts"],"sourcesContent":["import {\n  Directive,\n  directive,\n  DirectiveParameters,\n  DirectiveResult,\n  ElementPart,\n  PartInfo,\n  PartType,\n} from 'lit/directive.js';\nimport {noChange} from 'lit';\nimport {Context} from '../create-context';\nimport {ContextContainer} from '../controllers/context-container';\nimport {ContextEvent} from '../context-event';\n\nexport class ProvideDirective extends Directive {\n  private _container?: ContextContainer<unknown>;\n  private _context?: Context<unknown>;\n  private _lastElement?: HTMLElement;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.ELEMENT) {\n      throw new Error(\n        'The `provide` directive is only allowed on element bindings'\n      );\n    }\n  }\n\n  render<V>(_context: Context<V>, _value: V) {\n    return noChange;\n  }\n\n  onContextRequest = (ev: ContextEvent<Context<unknown>>): void => {\n    if (ev.context !== this._context) {\n      return;\n    }\n    ev.stopPropagation();\n    this._container?.addCallback(ev.callback, ev.multiple);\n  };\n\n  update(part: ElementPart, [context, value]: DirectiveParameters<this>) {\n    const result = this.render(context, value);\n    const element = part.element as HTMLElement;\n\n    if (this._container === undefined) {\n      this._container = new ContextContainer(value);\n    }\n    if (this._lastElement !== element) {\n      if (this._lastElement) {\n        this._lastElement.removeEventListener(\n          'context-request',\n          this.onContextRequest\n        );\n      }\n      this._lastElement = element;\n    }\n    this._context = context;\n    this._container.value = value;\n    element?.addEventListener('context-request', this.onContextRequest);\n    return result;\n  }\n}\n\n// construct the provide directive, and cast it to the correct generic form since\nconst provide = directive(ProvideDirective) as <V>(\n  context: Context<V>,\n  value: V,\n  f?: () => unknown\n) => DirectiveResult<typeof ProvideDirective>;\n\nexport {provide};\n"],"names":["ProvideDirective","Directive","constructor","partInfo","super","this","ev","context","_context","stopPropagation","_container","addCallback","callback","multiple","type","PartType","ELEMENT","Error","render","_value","noChange","update","part","value","result","element","undefined","ContextContainer","_lastElement","removeEventListener","onContextRequest","addEventListener","provide","directive"],"mappings":"sLAcaA,UAAyBC,EAKpCC,YAAYC,GAEV,GADAC,MAAMD,GAYRE,sBAAoBC,UACdA,EAAGC,UAAYF,KAAKG,IAGxBF,EAAGG,4BACHJ,KAAKK,kBAAYC,YAAYL,EAAGM,SAAUN,EAAGO,YAhBzCV,EAASW,OAASC,EAASC,QAC7B,MAAUC,MACR,+DAKNC,OAAUV,EAAsBW,GAC9B,OAAOC,EAWTC,OAAOC,GAAoBf,EAASgB,IAClC,MAAMC,EAASnB,KAAKa,OAAOX,EAASgB,GAC9BE,EAAUH,EAAKG,QAiBrB,YAfwBC,IAApBrB,KAAKK,IACPL,KAAKK,EAAa,IAAIiB,EAAiBJ,IAErClB,KAAKuB,IAAiBH,IACpBpB,KAAKuB,GACPvB,KAAKuB,EAAaC,oBAChB,kBACAxB,KAAKyB,kBAGTzB,KAAKuB,EAAeH,GAEtBpB,KAAKG,EAAWD,EAChBF,KAAKK,EAAWa,MAAQA,EACxBE,MAAAA,GAAAA,EAASM,iBAAiB,kBAAmB1B,KAAKyB,kBAC3CN,SAKLQ,EAAUC,EAAUjC"}