{"version":3,"file":"context-provided.js","sources":["../../src/lib/decorators/context-provided.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {ContextConsumer} from '../controllers/context-consumer';\nimport {Context} from '../create-context';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @contextProvided(loggerContext)\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function contextProvided<V>({\n  context,\n  multiple,\n}: {\n  context: Context<V>;\n  multiple?: boolean;\n}): <K extends PropertyKey>(\n  protoOrDescriptor: ReactiveElement & Record<K, V>,\n  name?: K\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => void | any {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      ctor.addInitializer((element: ReactiveElement): void => {\n        element.addController(\n          new ContextConsumer(\n            element,\n            context,\n            (value: V) => {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any -- have to force the property on the type\n              (element as any)[name] = value;\n            },\n            multiple\n          )\n        );\n      });\n    },\n  });\n}\n"],"names":["contextProvided","context","multiple","decorateProperty","finisher","ctor","name","addInitializer","element","addController","ContextConsumer","value"],"mappings":";;;;;YA4CgBA,GAAmBC,QACjCA,EAAOC,SACPA,IAUA,OAAOC,EAAiB,CACtBC,SAAU,CAACC,EAA8BC,KACvCD,EAAKE,gBAAgBC,IACnBA,EAAQC,cACN,IAAIC,EACFF,EACAP,GACCU,IAEEH,EAAgBF,GAAQK,IAE3BT"}