import { Directive, directive, PartType, } from 'lit/directive.js';
import { noChange } from 'lit';
import { ContextContainer } from '../controllers/context-container';
export class ProvideDirective extends Directive {
    constructor(partInfo) {
        super(partInfo);
        this.onContextRequest = (ev) => {
            var _a;
            if (ev.context !== this._context) {
                return;
            }
            ev.stopPropagation();
            (_a = this._container) === null || _a === void 0 ? void 0 : _a.addCallback(ev.callback, ev.multiple);
        };
        if (partInfo.type !== PartType.ELEMENT) {
            throw new Error('The `provide` directive is only allowed on element bindings');
        }
    }
    render(_context, _value) {
        return noChange;
    }
    update(part, [context, value]) {
        const result = this.render(context, value);
        const element = part.element;
        if (this._container === undefined) {
            this._container = new ContextContainer(value);
        }
        if (this._lastElement !== element) {
            if (this._lastElement) {
                this._lastElement.removeEventListener('context-request', this.onContextRequest);
            }
            this._lastElement = element;
        }
        this._context = context;
        this._container.value = value;
        element === null || element === void 0 ? void 0 : element.addEventListener('context-request', this.onContextRequest);
        return result;
    }
}
// construct the provide directive, and cast it to the correct generic form since
const provide = directive(ProvideDirective);
export { provide };
//# sourceMappingURL=provide.js.map