{"version":3,"file":"context-event.js","sourceRoot":"","sources":["../../src/lib/context-event.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AA2BH;;;;;;;;;GASG;AACH,MAAM,OAAO,YAAyC,SAAQ,KAAK;IAEjE,YACkB,OAAU,EACV,QAAyC,EACzC,QAAkB;QAElC,KAAK,CAAC,iBAAiB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAJ1C,YAAO,GAAP,OAAO,CAAG;QACV,aAAQ,GAAR,QAAQ,CAAiC;QACzC,aAAQ,GAAR,QAAQ,CAAU;QAJpC,aAAQ,GAAG,KAAK,CAAC;IAOjB,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Context, ContextType} from './create-context.js';\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextEvent<Context<unknown>>;\n  }\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n *\n * @param value value provided by a context provider\n * @param dispose a function provided by a context provider which can be called to 'disconnect' the provider from\n * this context consumer. Any provider which will call the callback repeatedly must provide this dispose function.\n */\nexport type ContextCallback<ValueType> = (\n  value: ValueType,\n  dispose?: () => void\n) => void;\n\n/**\n * An event fired by a context requester to signal it desires a specified context.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `multiple` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass a `dispose`\n * method to the callback which requesters can invoke to indicate they no longer wish to receive these updates.\n */\nexport class ContextEvent<T extends Context<unknown>> extends Event {\n  captured = false;\n  public constructor(\n    public readonly context: T,\n    public readonly callback: ContextCallback<ContextType<T>>,\n    public readonly multiple?: boolean\n  ) {\n    super('context-request', {bubbles: true, composed: true});\n  }\n}\n"]}