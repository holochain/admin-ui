{"version":3,"file":"context-provider.js","sourceRoot":"","sources":["../../../src/lib/controllers/context-provider.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAGxD;;;;;;;GAOG;AACH,MAAM,OAAO,eACX,SAAQ,gBAAgC;IAGxC,YACY,IAAqB,EACvB,OAAU,EAClB,YAA6B;QAE7B,KAAK,CAAC,YAAY,CAAC,CAAC;QAJV,SAAI,GAAJ,IAAI,CAAiB;QACvB,YAAO,GAAP,OAAO,CAAG;QAOb,qBAAgB,GAAG,CAAC,EAAkC,EAAQ,EAAE;YACrE,IAAI,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;gBAC/B,OAAO;aACR;YACD,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC,CAAC;QAVA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAUD,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACvE,CAAC;IACD,gBAAgB;QACd,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextEvent} from '../context-event.js';\nimport {Context, ContextType} from '../create-context.js';\nimport {ContextContainer} from './context-container.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\n/**\n * A ReactiveController which can add context provider behavior to a\n * custom-element.\n *\n * This controller simply listens to the `context-request` event when\n * the host is connected to the DOM and registers the received callbacks\n * against its observable Context implementation.\n */\nexport class ContextProvider<T extends Context<unknown>>\n  extends ContextContainer<ContextType<T>>\n  implements ReactiveController\n{\n  constructor(\n    protected host: ReactiveElement,\n    private context: T,\n    initialValue?: ContextType<T>\n  ) {\n    super(initialValue);\n    this.host.addController(this);\n  }\n\n  public onContextRequest = (ev: ContextEvent<Context<unknown>>): void => {\n    if (ev.context !== this.context) {\n      return;\n    }\n    ev.stopPropagation();\n    ev.captured = true;\n    this.addCallback(ev.callback, ev.multiple);\n  };\n  hostConnected(): void {\n    this.host.addEventListener('context-request', this.onContextRequest);\n  }\n  hostDisconnected(): void {\n    this.clearCallbacks();\n  }\n}\n"]}