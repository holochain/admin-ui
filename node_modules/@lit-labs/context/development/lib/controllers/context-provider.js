/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { ContextContainer } from './context-container.js';
/**
 * A ReactiveController which can add context provider behavior to a
 * custom-element.
 *
 * This controller simply listens to the `context-request` event when
 * the host is connected to the DOM and registers the received callbacks
 * against its observable Context implementation.
 */
export class ContextProvider extends ContextContainer {
    constructor(host, context, initialValue) {
        super(initialValue);
        this.host = host;
        this.context = context;
        this.onContextRequest = (ev) => {
            if (ev.context !== this.context) {
                return;
            }
            ev.stopPropagation();
            ev.captured = true;
            this.addCallback(ev.callback, ev.multiple);
        };
        this.host.addController(this);
    }
    hostConnected() {
        this.host.addEventListener('context-request', this.onContextRequest);
    }
    hostDisconnected() {
        this.clearCallbacks();
    }
}
//# sourceMappingURL=context-provider.js.map