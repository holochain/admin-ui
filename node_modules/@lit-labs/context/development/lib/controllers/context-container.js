/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * A simple class which stores a value, and triggers registered callbacks when the
 * value is changed via its setter.
 *
 * An implementor might use other observable patterns such as MobX or Redux to get
 * behavior like this. But this is a pretty minimal approach that will likely work
 * for a number of use cases.
 */
export class ContextContainer {
    constructor(defaultValue) {
        this.callbacks = new Set();
        this.updateContext = () => {
            this.callbacks.forEach(([callback, disposer]) => callback(this._value, disposer));
        };
        if (defaultValue !== undefined) {
            this.value = defaultValue;
        }
    }
    get value() {
        return this._value;
    }
    set value(v) {
        this.setValue(v);
    }
    setValue(v, force = false) {
        let changed = false;
        if (v !== this._value) {
            changed = true;
        }
        this._value = v;
        if (changed || force) {
            this.updateContext();
        }
    }
    addCallback(callback, multiple) {
        if (multiple) {
            const record = [
                callback,
                () => {
                    this.callbacks.delete(record);
                },
            ];
            this.callbacks.add(record);
        }
        callback(this.value);
    }
    clearCallbacks() {
        this.callbacks.clear();
    }
}
//# sourceMappingURL=context-container.js.map