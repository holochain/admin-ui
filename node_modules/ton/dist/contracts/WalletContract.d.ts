/// <reference types="node" />
import { Address, Cell, TonClient } from "..";
import { InternalMessage } from "../messages/InternalMessage";
import { Contract } from "./Contract";
import { WalletV1R1Source } from "./sources/WalletV1R1Source";
import { WalletV1R2Source } from "./sources/WalletV1R2Source";
import { WalletV1R3Source } from "./sources/WalletV1R3Source";
import { WalletV2R1Source } from "./sources/WalletV2R1Source";
import { WalletV2R2Source } from "./sources/WalletV2R2Source";
import { WalletV3R1Source } from "./sources/WalletV3R1Source";
import { WalletV3R2Source } from "./sources/WalletV3R2Source";
export declare type WalletContractSource = WalletV1R1Source | WalletV1R2Source | WalletV1R3Source | WalletV2R1Source | WalletV2R2Source | WalletV3R1Source | WalletV3R2Source;
export declare class WalletContract implements Contract {
    static create(client: TonClient, source: WalletContractSource): Promise<WalletContract>;
    readonly client: TonClient;
    readonly address: Address;
    readonly source: WalletContractSource;
    constructor(client: TonClient, source: WalletContractSource, address: Address);
    getSeqNo(): Promise<number>;
    createTransfer(args: {
        seqno: number;
        sendMode: number;
        order: InternalMessage;
        secretKey: Buffer;
    }): Promise<Cell>;
}
