"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletContract = void 0;
const __1 = require("..");
const WalletV1SigningMessage_1 = require("./messages/WalletV1SigningMessage");
const WalletV2SigningMessage_1 = require("./messages/WalletV2SigningMessage");
const WalletV3SigningMessage_1 = require("./messages/WalletV3SigningMessage");
const ContractSource_1 = require("./sources/ContractSource");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
class WalletContract {
    static async create(client, source) {
        let address = await (0, ContractSource_1.contractAddress)(source);
        return new WalletContract(client, source, address);
    }
    client;
    address;
    source;
    constructor(client, source, address) {
        this.client = client;
        this.address = address;
        this.source = source;
    }
    async getSeqNo() {
        if (await this.client.isContractDeployed(this.address)) {
            let res = await this.client.callGetMethod(this.address, 'seqno');
            return parseInt(res.stack[0][1], 16);
        }
        else {
            return 0;
        }
    }
    async createTransfer(args) {
        // Prepare message
        let signingMessage;
        switch (this.source.type) {
            case 'org.ton.wallets.simple':
            case 'org.ton.wallets.simple.r2':
            case 'org.ton.wallets.simple.r3':
                signingMessage = new WalletV1SigningMessage_1.WalletV1SigningMessage({
                    seqno: args.seqno,
                    sendMode: args.sendMode,
                    order: args.order
                });
                break;
            case 'org.ton.wallets.v2':
            case 'org.ton.wallets.v2.r2':
                signingMessage = new WalletV2SigningMessage_1.WalletV2SigningMessage({
                    seqno: args.seqno,
                    sendMode: args.sendMode,
                    order: args.order
                });
                break;
            case 'org.ton.wallets.v3':
            case 'org.ton.wallets.v3.r2':
                signingMessage = new WalletV3SigningMessage_1.WalletV3SigningMessage({
                    walletId: this.source.walletId,
                    seqno: args.seqno,
                    sendMode: args.sendMode,
                    order: args.order
                });
                break;
            default:
                throw Error('Unknown contract type: ' + this.source.type);
        }
        // Sign message
        const cell = new __1.Cell();
        signingMessage.writeTo(cell);
        let signature = Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(await cell.hash()), new Uint8Array(args.secretKey)));
        // Body
        const body = new __1.Cell();
        body.bits.writeBuffer(signature);
        signingMessage.writeTo(body);
        return body;
    }
}
exports.WalletContract = WalletContract;
