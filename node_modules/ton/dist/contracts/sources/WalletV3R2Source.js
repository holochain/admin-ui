"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletV3R2Source = void 0;
const __1 = require("../..");
class WalletV3R2Source {
    static create(opts) {
        // Resolve parameters
        let publicKey = opts.publicKey;
        let workchain = opts.workchain;
        let walletId;
        if (opts.walletId !== null && opts.walletId !== undefined) {
            walletId = opts.walletId;
        }
        else {
            walletId = 698983191 + workchain;
        }
        // Build initial code and data
        let initialCode = __1.Cell.fromBoc('B5EE9C724101010100710000DEFF0020DD2082014C97BA218201339CBAB19F71B0ED44D0D31FD31F31D70BFFE304E0A4F2608308D71820D31FD31FD31FF82313BBF263ED44D0D31FD31FD3FFD15132BAF2A15144BAF2A204F901541055F910F2A3F8009320D74A96D307D402FB00E8D101A4C8CB1FCB1FCBFFC9ED5410BD6DAD')[0];
        let initialData = new __1.Cell();
        initialData.bits.writeUint(0, 32);
        initialData.bits.writeUint(walletId, 32);
        initialData.bits.writeBuffer(publicKey);
        // Build contract source
        return new WalletV3R2Source({
            publicKey,
            workchain,
            walletId,
            initialCode,
            initialData
        });
    }
    initialCode;
    initialData;
    publicKey;
    workchain;
    walletId;
    type = 'org.ton.wallets.v3.r2';
    constructor(opts) {
        this.publicKey = opts.publicKey;
        this.workchain = opts.workchain;
        this.walletId = opts.walletId;
        this.initialCode = opts.initialCode;
        this.initialData = opts.initialData;
        Object.freeze(this);
    }
}
exports.WalletV3R2Source = WalletV3R2Source;
