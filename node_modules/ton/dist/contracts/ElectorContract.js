"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElectorContract = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const __1 = require("..");
const UnknownContractSource_1 = require("./sources/UnknownContractSource");
class ElectorContract {
    address = __1.Address.parseRaw('-1:3333333333333333333333333333333333333333333333333333333333333333');
    source = new UnknownContractSource_1.UnknownContractSource('org.ton.elector', -1);
    client;
    constructor(client) {
        this.client = client;
    }
    async getElectionEntities() {
        let res = await this.client.callGetMethod(this.address, 'participant_list_extended');
        // let startWorkTime = parseInt(res.stack[0][1], 16);
        // let endElectionsTime = parseInt(res.stack[1][1], 16);
        // let minStake = parseInt(res.stack[2][1], 16);
        // let allStakes = parseInt(res.stack[3][1], 16);
        let electionEntries = res.stack[4][1].elements;
        let entities = [];
        for (let e of electionEntries) {
            let pubkey = Buffer.from(e.tuple.elements[0].number.number, 'hex');
            let stake = new bn_js_1.default(e.tuple.elements[1].tuple.elements[0].number.number);
            let addrraw = new bn_js_1.default(e.tuple.elements[1].tuple.elements[2].number.number).toString('hex');
            let address = new __1.Address(-1, Buffer.from(addrraw, 'hex'));
            // console.warn(Buffer.from(addrraw, 'hex').length);
            entities.push({ pubkey, stake: stake, address });
        }
        return entities;
    }
}
exports.ElectorContract = ElectorContract;
