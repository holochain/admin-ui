"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonWallet = void 0;
const Cell_1 = require("../boc/Cell");
const CommonMessageInfo_1 = require("../messages/CommonMessageInfo");
const EmptyMessage_1 = require("../messages/EmptyMessage");
const InternalMessage_1 = require("../messages/InternalMessage");
const WalletV3SigningMessage_1 = require("../messages/wallet/WalletV3SigningMessage");
const convert_1 = require("../utils/convert");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const ExternalMessage_1 = require("../messages/ExternalMessage");
const RawMessage_1 = require("../messages/RawMessage");
class TonWallet {
    address;
    #client;
    constructor(client, address) {
        this.#client = client;
        this.address = address;
    }
    /**
     * Returns balance of wallet
     * @returns number of TON Coins in the wallet
     */
    getBalance() {
        return this.#client.getBalance(this.address);
    }
    /**
     * Resolve sequence number for transactions
     * @returns seqno to use in transactions
     */
    async getSeqNo() {
        let res = await this.#client.callGetMethod(this.address, 'seqno');
        return parseInt(res.stack[0][1], 16);
    }
    /**
     * Transfer TON Coins
     */
    transfer = async (args) => {
        // Prepare transaction
        let prepare = await this.prepareTransfer({
            to: args.to,
            value: args.value,
            seqno: args.seqno,
            bounceable: args.bounceable
        });
        // Sign transfer
        let signed = await this.signTransfer(prepare, args.secretKey);
        // Send transfer
        await this.sendTransfer(signed);
    };
    /**
     * Prepares transfer
     * @param args
     */
    prepareTransfer = async (args) => {
        // Resolve bounceable
        let seqno;
        if (args.seqno !== null && args.seqno !== undefined) {
            seqno = args.seqno;
        }
        else {
            seqno = await this.getSeqNo();
        }
        // Resolve bounceable
        let bounceable;
        if (args.bounceable !== null && args.bounceable !== undefined) {
            bounceable = args.bounceable;
        }
        else {
            let state = await this.#client.getContractState(args.to);
            if (state.state === 'uninitialized') {
                bounceable = false;
            }
            else {
                bounceable = true;
            }
        }
        // Prepared package
        return {
            to: args.to,
            seqno,
            bounceable,
            value: (0, convert_1.toNano)(args.value),
            sendMode: 3
        };
    };
    signTransfer = async (src, secretKey) => {
        // Signinig message
        const signingMessage = new WalletV3SigningMessage_1.WalletV3SigningMessage({
            seqno: src.seqno,
            sendMode: src.sendMode,
            order: new InternalMessage_1.InternalMessage({
                to: src.to,
                value: src.value,
                bounce: src.bounceable,
                body: new CommonMessageInfo_1.CommonMessageInfo({ body: new EmptyMessage_1.EmptyMessage() })
            })
        });
        // Resolve signature
        const cell = new Cell_1.Cell();
        signingMessage.writeTo(cell);
        let signature = Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(await cell.hash()), new Uint8Array(secretKey)));
        // Resolve body
        const body = new Cell_1.Cell();
        body.bits.writeBuffer(Buffer.from(signature));
        signingMessage.writeTo(body);
        return body;
    };
    sendTransfer = async (signed) => {
        const message = new ExternalMessage_1.ExternalMessage({
            to: this.address,
            body: new CommonMessageInfo_1.CommonMessageInfo({
                body: new RawMessage_1.RawMessage(signed)
            })
        });
        await this.#client.sendMessage(message);
    };
}
exports.TonWallet = TonWallet;
