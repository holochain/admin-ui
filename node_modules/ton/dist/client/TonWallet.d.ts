/// <reference types="node" />
import BN from "bn.js";
import { Address } from "..";
import { Cell } from "../boc/Cell";
import { Maybe } from "../types";
import { TonClient } from "./TonClient";
declare type TransferPackage = {
    to: Address;
    value: BN;
    seqno: number;
    bounceable: boolean;
    sendMode: number;
};
export declare class TonWallet {
    #private;
    readonly address: Address;
    constructor(client: TonClient, address: Address);
    /**
     * Returns balance of wallet
     * @returns number of TON Coins in the wallet
     */
    getBalance(): Promise<number>;
    /**
     * Resolve sequence number for transactions
     * @returns seqno to use in transactions
     */
    getSeqNo(): Promise<number>;
    /**
     * Transfer TON Coins
     */
    transfer: (args: {
        to: Address;
        value: number;
        seqno: number;
        secretKey: Buffer;
        bounceable?: Maybe<boolean>;
    }) => Promise<void>;
    /**
     * Prepares transfer
     * @param args
     */
    prepareTransfer: (args: {
        to: Address;
        value: number;
        seqno?: Maybe<number>;
        bounceable?: Maybe<boolean>;
    }) => Promise<TransferPackage>;
    signTransfer: (src: TransferPackage, secretKey: Buffer) => Promise<Cell>;
    sendTransfer: (signed: Cell) => Promise<void>;
}
export {};
