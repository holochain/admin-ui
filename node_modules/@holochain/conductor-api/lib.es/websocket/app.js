var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Defines AppWebsocket, an easy-to-use websocket implementation of the
 * Conductor API for apps
 *
 *    const client = AppWebsocket.connect(
 *      'ws://localhost:9000',
 *      signal => console.log('got a signal:', signal)
 *    )
 *
 *    client.callZome({...})  // TODO: show what's in here
 *      .then(() => {
 *        console.log('DNA successfully installed')
 *      })
 *      .catch(err => {
 *        console.error('problem installing DNA:', err)
 *      })
 */
import { encode, decode } from '@msgpack/msgpack';
import { WsClient } from './client';
import { catchError, promiseTimeout, DEFAULT_TIMEOUT } from './common';
import { requesterTransformer } from '../api/common';
import { getLauncherEnvironment } from '../environments/launcher';
export class AppWebsocket {
    constructor(client, defaultTimeout, overrideInstalledAppId) {
        this.overrideInstalledAppId = overrideInstalledAppId;
        this._requester = (tag, transformer) => requesterTransformer((req, timeout) => promiseTimeout(this.client.request(req), tag, timeout || this.defaultTimeout).then(catchError), tag, transformer);
        this.appInfo = this._requester('app_info', appInfoTransform(this.overrideInstalledAppId));
        this.callZome = this._requester('zome_call_invocation', callZomeTransform);
        this.client = client;
        this.defaultTimeout = defaultTimeout === undefined ? DEFAULT_TIMEOUT : defaultTimeout;
    }
    static connect(url, defaultTimeout, signalCb) {
        return __awaiter(this, void 0, void 0, function* () {
            // Check if we are in the launcher's environment, and if so, redirect the url to connect to
            const env = yield getLauncherEnvironment();
            if (env) {
                url = `ws://localhost:${env.APP_INTERFACE_PORT}`;
            }
            const wsClient = yield WsClient.connect(url, signalCb);
            return new AppWebsocket(wsClient, defaultTimeout, env ? env.INSTALLED_APP_ID : undefined);
        });
    }
}
const callZomeTransform = {
    input: (req) => {
        return Object.assign(Object.assign({}, req), { payload: encode(req.payload) });
    },
    output: (res) => {
        return decode(res);
    },
};
const appInfoTransform = (overrideInstalledAppId) => ({
    input: (req) => {
        if (overrideInstalledAppId) {
            return {
                installed_app_id: overrideInstalledAppId,
            };
        }
        return req;
    },
    output: (res) => {
        return res;
    },
});
//# sourceMappingURL=app.js.map