"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLauncherEnvironment = exports.LAUNCHER_ENV_URL = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
// This is coupled with https://github.com/holochain/launcher/blob/develop/src-tauri/src/uis/caddy.rs#L13
exports.LAUNCHER_ENV_URL = "/.launcher-env.json";
function fetchLauncherEnvironment() {
    return __awaiter(this, void 0, void 0, function* () {
        const env = yield cross_fetch_1.default(exports.LAUNCHER_ENV_URL);
        if (env.ok) {
            const launcherEnvironment = yield env.json();
            return launcherEnvironment;
        }
        else {
            // We are not in the launcher environment
            if (env.status === 404) {
                console.warn("[@holochain/conductor-api]: you are in a development environment. When this UI is run in the Holochain Launcher, `AppWebsocket.connect()`, `AdminWebsocket.connect()` and `appWebsocket.appInfo()` will have their parameters ignored and substituted by the ones provided by the Holochain Launcher.");
                return undefined;
            }
            else {
                throw new Error(`Error trying to fetch the launcher environment: ${env.statusText}`);
            }
        }
    });
}
const isBrowser = typeof window !== "undefined";
const isJest = typeof process !== "undefined" && process.env && process.env.JEST_WORKER_ID !== undefined;
let promise;
if (isBrowser && !isJest) {
    promise = fetchLauncherEnvironment().catch(console.error);
}
function getLauncherEnvironment() {
    return __awaiter(this, void 0, void 0, function* () {
        if (isBrowser) {
            return promise;
        }
        else {
            return undefined;
        }
    });
}
exports.getLauncherEnvironment = getLauncherEnvironment;
//# sourceMappingURL=launcher.js.map