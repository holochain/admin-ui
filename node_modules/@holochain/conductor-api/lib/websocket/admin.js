"use strict";
/**
 * Defines AdminWebsocket, an easy-to-use websocket implementation of the
 * Conductor Admin API
 *
 *    const client = AdminWebsocket.connect(
 *      'ws://localhost:9000'
 *    )
 *
 *    client.generateAgentPubKey()
 *      .then(agentPubKey => {
 *        console.log('Agent successfully generated:', agentPubKey)
 *      })
 *      .catch(err => {
 *        console.error('problem generating agent:', err)
 *      })
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminWebsocket = void 0;
const Api = __importStar(require("../api/admin"));
const client_1 = require("./client");
const common_1 = require("./common");
const common_2 = require("../api/common");
const launcher_1 = require("../environments/launcher");
class AdminWebsocket {
    constructor(client, defaultTimeout) {
        this._requester = (tag, transformer) => common_2.requesterTransformer((req, timeout) => common_1.promiseTimeout(this.client.request(req), tag, timeout || this.defaultTimeout).then(common_1.catchError), tag, transformer);
        // the specific request/response types come from the Interface
        // which this class implements
        this.attachAppInterface = this._requester('attach_app_interface');
        // Deprecated
        this.activateApp = this._requester('activate_app');
        // Deprecated
        this.deactivateApp = this._requester('deactivate_app');
        this.enableApp = this._requester('enable_app');
        this.disableApp = this._requester('disable_app');
        this.startApp = this._requester('start_app');
        this.dumpState = this._requester('dump_state', dumpStateTransform);
        this.generateAgentPubKey = this._requester('generate_agent_pub_key');
        this.registerDna = this._requester('register_dna');
        this.installApp = this._requester('install_app');
        this.uninstallApp = this._requester('uninstall_app');
        this.installAppBundle = this._requester('install_app_bundle');
        this.createCloneCell = this._requester('create_clone_cell');
        this.listDnas = this._requester('list_dnas');
        this.listCellIds = this._requester('list_cell_ids');
        // Deprecated
        this.listActiveApps = this._requester('list_active_apps');
        this.listApps = this._requester('list_apps', listAppsTransform);
        this.listAppInterfaces = this._requester('list_app_interfaces');
        this.requestAgentInfo = this._requester('request_agent_info');
        this.addAgentInfo = this._requester('add_agent_info');
        this.client = client;
        this.defaultTimeout = defaultTimeout === undefined ? common_1.DEFAULT_TIMEOUT : defaultTimeout;
    }
    static connect(url, defaultTimeout) {
        return __awaiter(this, void 0, void 0, function* () {
            // Check if we are in the launcher's environment, and if so, redirect the url to connect to
            const env = yield launcher_1.getLauncherEnvironment();
            if (env) {
                url = `ws://localhost:${env.ADMIN_INTERFACE_PORT}`;
            }
            const wsClient = yield client_1.WsClient.connect(url);
            return new AdminWebsocket(wsClient, defaultTimeout);
        });
    }
}
exports.AdminWebsocket = AdminWebsocket;
const listAppsTransform = {
    input: (req) => {
        const args = {};
        if (req.status_filter) {
            args.status_filter = getAppStatusInApiForm(req.status_filter);
        }
        return args;
    },
    output: (res) => res,
};
const dumpStateTransform = {
    input: (req) => req,
    output: (res) => {
        return JSON.parse(res);
    },
};
function getAppStatusInApiForm(status_filter) {
    switch (status_filter) {
        case Api.AppStatusFilter.Running:
            return {
                Running: null,
            };
        case Api.AppStatusFilter.Enabled:
            return {
                Enabled: null,
            };
        case Api.AppStatusFilter.Paused:
            return {
                Paused: null,
            };
        case Api.AppStatusFilter.Disabled:
            return {
                Disabled: null,
            };
        case Api.AppStatusFilter.Stopped:
            return {
                Stopped: null,
            };
    }
}
//# sourceMappingURL=admin.js.map