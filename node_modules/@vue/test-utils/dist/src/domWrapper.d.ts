import BaseWrapper from './baseWrapper';
import WrapperLike from './interfaces/wrapperLike';
export declare class DOMWrapper<ElementType extends Element> extends BaseWrapper<ElementType> implements WrapperLike {
    constructor(element: ElementType);
    isVisible(): boolean;
    html(): string;
    find<K extends keyof HTMLElementTagNameMap>(selector: K): DOMWrapper<HTMLElementTagNameMap[K]>;
    find<K extends keyof SVGElementTagNameMap>(selector: K): DOMWrapper<SVGElementTagNameMap[K]>;
    find<T extends Element>(selector: string): DOMWrapper<T>;
    get<K extends keyof HTMLElementTagNameMap>(selector: K): Omit<DOMWrapper<HTMLElementTagNameMap[K]>, 'exists'>;
    get<K extends keyof SVGElementTagNameMap>(selector: K): Omit<DOMWrapper<SVGElementTagNameMap[K]>, 'exists'>;
    get<T extends Element>(selector: string): Omit<DOMWrapper<T>, 'exists'>;
    findAll<K extends keyof HTMLElementTagNameMap>(selector: K): DOMWrapper<HTMLElementTagNameMap[K]>[];
    findAll<K extends keyof SVGElementTagNameMap>(selector: K): DOMWrapper<SVGElementTagNameMap[K]>[];
    findAll<T extends Element>(selector: string): DOMWrapper<T>[];
    private setChecked;
    setValue(value?: any): Promise<void>;
    private setSelected;
}
