{"version":3,"file":"query-assigned-nodes.js","sources":["../src/decorators/query-assigned-nodes.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n *     meaning any assigned nodes that are slot elements are replaced with their\n *     assigned nodes.\n * @param selector A string which filters the results to elements that match\n *     the given css selector.\n *\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  slotName = '',\n  flatten = false,\n  selector = ''\n) {\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${\n          slotName ? `[name=${slotName}]` : ':not([name])'\n        }`;\n        const slot = this.renderRoot?.querySelector(slotSelector);\n        let nodes = (slot as HTMLSlotElement)?.assignedNodes({flatten}) ?? [];\n        if (selector) {\n          nodes = nodes.filter(\n            (node) =>\n              node.nodeType === Node.ELEMENT_NODE &&\n              (node as Element).matches(selector)\n          );\n        }\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"names":["queryAssignedNodes","slotName","flatten","selector","decorateProperty","descriptor","_name","get","slotSelector","nodes","this","renderRoot","querySelector","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","matches","enumerable","configurable"],"mappings":";;;;;YA0CgBA,EACdC,EAAW,GACXC,GAAU,EACVC,EAAW,IAEX,OAAOC,EAAiB,CACtBC,WAAaC,KACXC,gBACE,MAAMC,EAAe,QACnBP,EAAW,SAASA,KAAc,gBAGpC,IAAIQ,gCADSC,KAAKC,iCAAYC,cAAcJ,yBACLK,cAAc,CAACX,QAAAA,mBAAa,GAQnE,OAPIC,IACFM,EAAQA,EAAMK,QACXC,GACCA,EAAKC,WAAaC,KAAKC,cACtBH,EAAiBI,QAAQhB,MAGzBM,GAETW,YAAY,EACZC,cAAc"}