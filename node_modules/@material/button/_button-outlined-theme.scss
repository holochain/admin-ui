//
// Copyright 2021 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// stylelint-disable selector-class-pattern --
// Selector '.mdc-*' should only be used in this project.

@use 'sass:map';
@use 'sass:math';
@use '@material/feature-targeting/feature-targeting';
@use '@material/theme/state';
@use '@material/theme/theme';
@use '@material/theme/theme-color';
@use '@material/ripple/ripple-theme';
@use './button-base';
@use './button-shared-theme';
@use './button-ripple';

$outlined-border-width: 1px !default;
$outline-color: rgba(theme-color.prop-value(on-surface), 0.12) !default;

$light-theme: (
  container-disabled-color: transparent,
  container-shape: button-shared-theme.$shape-radius,
  density: button-shared-theme.$density-scale,
  disabled-label-text-color: button-shared-theme.$disabled-ink-color,
  disabled-outline-color: button-shared-theme.$disabled-container-color,
  focus-label-text-color: null,
  focus-state-layer-color: primary,
  focus-state-layer-opacity: 0.12,
  focus-outline-color: null,
  hover-label-text-color: null,
  hover-state-layer-color: primary,
  hover-state-layer-opacity: 0.04,
  label-text-color: primary,
  label-text-font: null,
  label-text-size: null,
  label-text-tracking: null,
  label-text-weight: null,
  outline-color: $outline-color,
  outline-width: $outlined-border-width,
  pressed-label-text-color: null,
  pressed-state-layer-color: primary,
  pressed-state-layer-opacity: 0.12,
  with-icon-icon-color: null,
  with-icon-hover-icon-color: null,
  with-icon-focus-icon-color: null,
  with-icon-pressed-icon-color: null,
  with-icon-disabled-icon-color: null,
);

/// Sets theme based on provided theme configuration.
/// Only emits theme related styles.
/// @param {Map} $theme - Theme configuration to use.
@mixin theme($theme, $query: feature-targeting.all()) {
  @include theme.validate-keys($light-theme, $theme);
  @include button-shared-theme.theme($theme, $query: $query);
  @include outline-color(
    (
      default: map.get($theme, outline-color),
      disabled: map.get($theme, disabled-outline-color),
      focus: map.get($theme, focus-outline-color),
    ),
    $query: $query
  );
  @include outline-width(map.get($theme, outline-width), $query: $query);
}

///
/// Sets the outline color to the given color for an enabled button.
/// @param {Color} $color-or-map - The desired outline color, specified either
///     as a flat value or a map of colors with states
///     {default, hover, focused, pressed, disabled} as keys.
///
@mixin outline-color($color-or-map, $query: feature-targeting.all()) {
  &:not(:disabled) {
    @include _outline-color(
      state.get-default-state($color-or-map),
      $query: $query
    );

    &:hover {
      @include _outline-color(
        state.get-hover-state($color-or-map),
        $query: $query
      );
    }

    @include ripple-theme.focus() {
      @include _outline-color(
        state.get-focus-state($color-or-map),
        $query: $query
      );
    }

    // Increase active state specificity due to ripple-theme.focus().
    &:active,
    &:focus:active {
      @include _outline-color(
        state.get-pressed-state($color-or-map),
        $query: $query
      );
    }
  }

  &:disabled {
    @include _outline-color(
      state.get-disabled-state($color-or-map),
      $query: $query
    );
  }
}

///
/// Sets the outline color to the given color for a disabled button.
/// @param {Color} $color - The desired outline color.
/// @deprecated - call `outline-color` instead with `disabled` as a map key.
///
@mixin disabled-outline-color($color, $query: feature-targeting.all()) {
  @include outline-color(
    (
      disabled: $color,
    ),
    $query: $query
  );
}

@mixin outline-width(
  $outline-width,
  $padding: button-shared-theme.$contained-horizontal-padding,
  // For a button with an icon, the padding on the side of the button with the
  // icon.
  $padding-icon: button-shared-theme.$contained-horizontal-padding-icon,
  $query: feature-targeting.all()
) {
  @if $outline-width != null {
    $feat-structure: feature-targeting.create-target($query, structure);
    // Note: Adjust padding to maintain consistent width with non-outlined buttons
    $padding-value: math.max($padding - $outline-width, 0);
    $padding-icon-value: math.max($padding-icon - $outline-width, 0);

    @include button-shared-theme.horizontal-padding(
      $padding: $padding-value,
      $padding-icon: $padding-icon-value,
      $query: $query
    );

    @include feature-targeting.targets($feat-structure) {
      border-width: $outline-width;
    }

    #{button-ripple.$ripple-target} {
      @include feature-targeting.targets($feat-structure) {
        top: -$outline-width;
        left: -$outline-width;
        border: $outline-width solid transparent;
      }
    }

    .mdc-button__touch {
      @include feature-targeting.targets($feat-structure) {
        left: -$outline-width;
        width: calc(100% + 2 * #{$outline-width});
      }
    }
  }
}

///
/// Sets the outline color to the given color. This mixin should be
/// wrapped in a selector that qualifies button state.
/// @access private
///
@mixin _outline-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @if $color {
    @include feature-targeting.targets($feat-color) {
      @include theme.property(border-color, $color);
    }
  }
}
