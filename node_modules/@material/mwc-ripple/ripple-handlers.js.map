{"version":3,"file":"ripple-handlers.js","sourceRoot":"","sources":["ripple-handlers.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAQH;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,OAAO,cAAc;IAQzB;IACI,2CAA2C;IAC3C,QAA6C;QAC/C,IAAI,CAAC,UAAU,GAAG,CAAC,EAAU,EAAE,EAAE;YAC/B,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;YACrB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE;YACrB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {RippleInterface} from '@material/mwc-base/utils';\n\n/**\n * Class that encapsulates the events handlers for `mwc-ripple`\n *\n *\n * Example:\n * ```\n * class XFoo extends LitElement {\n *   async getRipple() {\n *     this.renderRipple = true;\n *     await this.updateComplete;\n *     return this.renderRoot.querySelector('mwc-ripple');\n *   }\n *   rippleHandlers = new RippleHandlers(() => this.getRipple());\n *\n *   render() {\n *     return html`\n *       <div @mousedown=${this.rippleHandlers.startPress}></div>\n *       ${this.renderRipple ? html`<mwc-ripple></mwc-ripple>` : ''}\n *     `;\n *   }\n * }\n * ```\n */\nexport class RippleHandlers implements RippleInterface {\n  startPress: (ev?: Event) => void;\n  endPress: () => void;\n  startFocus: () => void;\n  endFocus: () => void;\n  startHover: () => void;\n  endHover: () => void;\n\n  constructor(\n      /** Function that returns a `mwc-ripple` */\n      rippleFn: () => Promise<RippleInterface|null>) {\n    this.startPress = (ev?: Event) => {\n      rippleFn().then((r) => {\n        r && r.startPress(ev);\n      });\n    };\n    this.endPress = () => {\n      rippleFn().then((r) => {\n        r && r.endPress();\n      });\n    };\n    this.startFocus = () => {\n      rippleFn().then((r) => {\n        r && r.startFocus();\n      });\n    };\n    this.endFocus = () => {\n      rippleFn().then((r) => {\n        r && r.endFocus();\n      });\n    };\n    this.startHover = () => {\n      rippleFn().then((r) => {\n        r && r.startHover();\n      });\n    };\n    this.endHover = () => {\n      rippleFn().then((r) => {\n        r && r.endHover();\n      });\n    };\n  }\n}\n"]}