{"version":3,"file":"form-element.js","sourceRoot":"","sources":["form-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,iBAAiB,EAAE,WAAW,EAAwD,MAAM,gBAAgB,CAAC;AAGrH,OAAO,EACL,iBAAiB,EACjB,WAAW,GAKZ,CAAC;AAEF,qBAAqB;AACrB,MAAM,OAAgB,WAAY,SAAQ,WAAW;IAgBnD,KAAK;QACH,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;IACH,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;SACpD;IACH,CAAC;IAES,YAAY;QACpB,KAAK,CAAC,YAAY,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;AAnCM,6BAAiB,GACH,EAAC,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {addHasRemoveClass, BaseElement, CustomEventListener, EventType, SpecificEventListener} from './base-element';\nimport {RippleInterface} from './utils';\n\nexport {\n  addHasRemoveClass,\n  BaseElement,\n  CustomEventListener,\n  EventType,\n  RippleInterface,\n  SpecificEventListener,\n};\n\n/** @soyCompatible */\nexport abstract class FormElement extends BaseElement {\n  static shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  /**\n   * Form-capable element in the component ShadowRoot.\n   *\n   * Define in your component with the `@query` decorator\n   */\n  protected abstract formElement: HTMLElement;\n\n  /**\n   * Implement ripple getter for Ripple integration with mwc-formfield\n   */\n  readonly ripple?: Promise<RippleInterface|null>;\n\n  click() {\n    if (this.formElement) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  setAriaLabel(label: string) {\n    if (this.formElement) {\n      this.formElement.setAttribute('aria-label', label);\n    }\n  }\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n}\n"]}