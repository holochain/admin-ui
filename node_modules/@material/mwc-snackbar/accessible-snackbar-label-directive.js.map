{"version":3,"file":"accessible-snackbar-label-directive.js","sourceRoot":"","sources":["accessible-snackbar-label-directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport MDCSnackbarFoundation from '@material/snackbar/foundation';\nimport {html, render, TemplateResult} from 'lit-html';\nimport {AsyncDirective} from 'lit-html/async-directive';\nimport {ChildPart, directive, DirectiveParameters, PartInfo, PartType} from 'lit-html/directive';\n\nconst {ARIA_LIVE_DELAY_MS} = MDCSnackbarFoundation.numbers;\n/**\n * A lit directive implementation of @material/mdc-snackbar/util.ts#announce,\n * which does some tricks to ensure that snackbar labels will be handled\n * correctly by screen readers.\n *\n * The existing MDC announce util function is difficult to use directly here,\n * because Lit can crash when DOM that it is managing changes outside of its\n * purvue. In this case, we would render our labelText as the text content of\n * the label div, but the MDC announce function then clears that text content,\n * and resets it after a timeout (see below for why). We do the same thing here,\n * but in a way that fits into Lit's lifecycle.\n *\n * TODO(aomarks) Investigate whether this can be simplified; but to do that we\n * first need testing infrastructure to verify that it remains compatible with\n * screen readers. For example, can we just create an entirely new label node\n * every time we open or labelText changes? If not, and the async text/::before\n * swap is strictly required, can we at elast make this directive more generic\n * (e.g. so that we don't hard-code the name of the label class).\n */\nclass AccessibleSnackbarLabel extends AsyncDirective {\n  protected labelEl: HTMLElement|null = null;\n  protected timerId: number|null = null;\n  protected previousPart: ChildPart|null = null;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('AccessibleSnackbarLabel only supports child parts.');\n    }\n  }\n\n  update(part: ChildPart, [labelText, isOpen]: DirectiveParameters<this>) {\n    if (!isOpen) {\n      // We never need to do anything if we're closed, even if the label also\n      // changed in this batch of changes. We'll fully reset the label text\n      // whenever we next open.\n      return;\n    }\n\n    if (this.labelEl === null) {\n      // Create the label element once, the first time we open.\n      const wrapperEl = document.createElement('div');\n      const labelTemplate =\n          html`<div class=\"mdc-snackbar__label\" role=\"status\" aria-live=\"polite\">${\n              labelText}</div>`;\n\n      render(labelTemplate, wrapperEl);\n\n      const labelEl = wrapperEl.firstElementChild! as HTMLElement;\n      // endNode can't be a Document, so it must have a parent.\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      part.endNode?.parentNode!.insertBefore(labelEl, part.endNode);\n      this.labelEl = labelEl;\n      // No need to do anything more for ARIA the first time we open. We just\n      // created the element with the current label, so screen readers will\n      // detect it fine.\n      return labelEl;\n    }\n\n    const labelEl = this.labelEl;\n\n    // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing\n    // the message twice.\n    labelEl.setAttribute('aria-live', 'off');\n\n    // Temporarily clear `textContent` to force a DOM mutation event that will\n    // be detected by screen readers. `aria-live` elements are only announced\n    // when the element's `textContent` *changes*, so snackbars sent to the\n    // browser in the initial HTML response won't be read unless we clear the\n    // element's `textContent` first. Similarly, displaying the same snackbar\n    // message twice in a row doesn't trigger a DOM mutation event, so screen\n    // readers won't announce the second message unless we first clear\n    // `textContent`.\n    //\n    // We have to clear the label text two different ways to make it work in\n    // all browsers and screen readers:\n    //\n    //   1. `textContent = ''` is required for IE11 + JAWS\n    //   2. `innerHTML = '&nbsp;'` is required for Chrome + JAWS and NVDA\n    //\n    // All other browser/screen reader combinations support both methods.\n    //\n    // The wrapper `<span>` visually hides the space character so that it\n    // doesn't cause jank when added/removed. N.B.: Setting `position:\n    // absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting\n    // the DOM change.\n    //\n    // This technique has been tested in:\n    //\n    //   * JAWS 2019:\n    //       - Chrome 70\n    //       - Firefox 60 (ESR)\n    //       - IE 11\n    //   * NVDA 2018:\n    //       - Chrome 70\n    //       - Firefox 60 (ESR)\n    //       - IE 11\n    //   * ChromeVox 53\n    labelEl.textContent = '';\n    const spaceTemplate =\n        html`<span style=\"display: inline-block; width: 0; height: 1px;\">&nbsp;</span>`;\n    render(spaceTemplate, labelEl);\n\n    // Prevent visual jank by temporarily displaying the label text in the\n    // ::before pseudo-element. CSS generated content is normally announced by\n    // screen readers (except in IE 11; see\n    // https://tink.uk/accessibility-support-for-css-generated-content/);\n    // however, `aria-live` is turned off, so this DOM update will be ignored\n    // by screen readers.\n    labelEl.setAttribute('data-mdc-snackbar-label-text', labelText);\n\n    if (this.timerId !== null) {\n      // We hadn't yet swapped the textContent back in since the last time we\n      // opened or changed the label. Cancel that task so we don't clobber the\n      // new label.\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = window.setTimeout(() => {\n      this.timerId = null;\n\n      // Allow screen readers to announce changes to the DOM again.\n      labelEl.setAttribute('aria-live', 'polite');\n\n      // Remove the message from the ::before pseudo-element.\n      labelEl.removeAttribute('data-mdc-snackbar-label-text');\n\n      // Restore the original label text, which will be announced by\n      // screen readers.\n      labelEl.textContent = labelText;\n\n      this.setValue(this.labelEl);\n    }, ARIA_LIVE_DELAY_MS);\n\n    return labelEl;\n  }\n\n  render(labelText: string, isOpen: boolean): TemplateResult {\n    if (!isOpen) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"mdc-snackbar__label\" role=\"status\" aria-live=\"polite\">${\n        labelText}</div>`;\n  }\n}\n\nexport const accessibleSnackbarLabel = directive(AccessibleSnackbarLabel);\n"]}