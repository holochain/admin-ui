import { ListItem } from '@scoped-elements/material-web';
import { Card } from '@scoped-elements/material-web';
import { Button } from '@scoped-elements/material-web';
import { ZomeFunctionResult } from './types';
import { Cell, Workflow } from '@holochain-playground/core';
import { AgentPubKeyB64 } from '@holochain-open-dev/core-types';
import { CircularProgress } from '@scoped-elements/material-web';
import { ExpandableLine } from '../helpers/expandable-line';
import { JsonViewer } from '@power-elements/json-viewer';
import { Icon } from '@scoped-elements/material-web';
import { CopyableHash } from '../helpers/copyable-hash';
import { CellObserver } from '../../base/cell-observer';
import { PlaygroundElement } from '../../base/playground-element';
import { CellsController } from '../../base/cells-controller';
export declare class ZomeFnsResults extends PlaygroundElement implements CellObserver {
    hideAgentPubKey: boolean;
    forAgent: AgentPubKeyB64 | undefined;
    private _results;
    _cellsController: CellsController;
    get activeCell(): Cell;
    observedCells(): Cell[];
    beforeWorkflow(cell: Cell, workflowInfo: Workflow<any, any>): Promise<void>;
    workflowSuccess(cell: Cell, workflowInfo: Workflow<any, any>, result: any): Promise<void>;
    workflowError(cell: Cell, workflowInfo: Workflow<any, any>, error: any): Promise<void>;
    getActiveResults(): Array<[string, ZomeFunctionResult]>;
    renderResult(result: ZomeFunctionResult): import("lit").TemplateResult<1>;
    renderAgent(): import("lit").TemplateResult<1>;
    render(): import("lit").TemplateResult<1>;
    static get styles(): import("lit").CSSResult[];
    static get scopedElements(): {
        'mwc-list-item': typeof ListItem;
        'mwc-icon': typeof Icon;
        'mwc-circular-progress': typeof CircularProgress;
        'mwc-button': typeof Button;
        'mwc-card': typeof Card;
        'json-viewer': typeof JsonViewer;
        'expandable-line': typeof ExpandableLine;
        'copyable-hash': typeof CopyableHash;
    };
}
